package com.serverapp.service.implement;

import com.google.gson.Gson;
import com.serverapp.controller.view.AppController;
import com.serverapp.database.Redis;
import com.serverapp.enums.RequestType;
import com.serverapp.model.ClamAV;
import com.serverapp.model.ClamAVResponse;
import com.serverapp.service.IDetectMalware;
import com.serverapp.socket.SocketManager;
import com.serverapp.util.AlertHelper;
import com.serverapp.util.CurrentType;
import javafx.application.Platform;
import javafx.scene.control.Alert;
import jdk.jfr.Frequency;

import java.net.Socket;
import java.util.List;

public class DetectMalware implements IDetectMalware {
    private Boolean isRunning;

    public DetectMalware() {
        isRunning = false;
    }

    @Override
    public void start() {
    }

    //Listenning for response from Clients
    @Override
    public void listening() {

    }

    @Override
    public void logResult() {
        //Show result
    }

    public void Listen(String ipAdress) throws Exception {
        String response = SocketManager.getInstance().receiveDecryptedMessage(ipAdress).trim();
        if (!response.isEmpty()) {
            Gson gson = new Gson();
            ClamAVResponse clamAV = gson.fromJson(response, ClamAVResponse.class);
            if (clamAV != null) {
                Redis.getInstance().appendMalwareResponse(ipAdress, clamAV.message);
                if (clamAV.infectedFiles != null && clamAV.infectedFiles.size() > 0) {
                    Redis.getInstance().appendMalwareResponse(ipAdress, "Infected Files: ");
                    String FilePaths = String.join("\n", clamAV.infectedFiles);
                    AlertHelper.showAlert(
                            Alert.AlertType.ERROR,
                            "Malware Detected",
                            "Find " + clamAV.infectedFiles.size() + " in Client with address: " + ipAdress,
                            String.join("\n The malware found in: " + FilePaths));
                }
                Platform.runLater(() -> {
                    AppController.getInstance().update();
                });
            }
        }
    }

    public void send(List<String> checkedClient, ClamAV clamAV) {
        Gson gson = new Gson();
        checkedClient.forEach((item) -> {
            String message = gson.toJson(clamAV);
            try {
                SocketManager.getInstance().sendCurrentRequestType(item);
                SocketManager.getInstance().sendEncryptedMessage(message, item);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        checkedClient.forEach((item) -> {
            try {
                Listen(item);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    @Override
    public void stop() {

    }
}
